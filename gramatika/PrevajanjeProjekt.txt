Osnovni tipi:

Enota: nil
Realna števila: 1.2
Nizi: "niz"
Koordinate: (X, Y)
Datum: "2024-04-15"


Bloki:

account "Name" {
  TRANSACTIONS
}

transaction {
  name: "Mango bancni izpisek";
  title: "Restavracija Mango Maribor";
  amount: -12.50;
  date: "2024-04-15";
  location: (13.403, 46.055)
}


Konstante in spremenljivke:

let home = (13.403, 46.055);


Matematični izrazi:

let budget = 1000 - 2 * 50;


Kontrola toka:

if amount < 0 {
  alert("Odliv sredstev!");
}


Seznami:

let txs = [txn1, txn2, txn3];
foreach tx in txs {
  show(tx.location)
}


Meta podatki:

transaction {
  name: "Petrol";
  amount: -40.0;
  location: (13.415, 46.060);
  set("category", "Transport")
}


Povezani podatki:

let geolocs = link("https://maps.googleapis.com/api/...");



Povpraševanja:

let nearby = neigh((13.4, 46.05), 0.01);
foreach loc in nearby {
  highlight loc
}


BNF:

Expr ::= Bitwise;

Bitwise ::= Additive Bitwise';
Bitwise' ::= "bwand" Additive Bitwise' | "bwor" Additive Bitwise' | ε;

Additive ::= Multiplicative Additive';
Additive' ::= "+" Multiplicative Additive' | "-" Multiplicative Additive' | ε;

Multiplicative ::= Unary Multiplicative';
Multiplicative' ::= "*" Unary Multiplicative' | "/" Unary Multiplicative' | ε;

Unary ::= "+" Primary | "-" Primary | Primary;

Primary ::= int | float | string | variable 
          | coord | date | list | object
          | "fst" "(" coord ")" | "snd" "(" coord ")"
          | "(" Expr ")";

coord ::= "(" float "," float ")";
date ::= string;           // v obliki "YYYY-MM-DD"
list ::= "[" Exprs "]";
Exprs ::= Expr ("," Expr)* | ε;

object ::= "transaction" "{" TransactionFields "}";
TransactionFields ::= Field ( ";" Field )*;
Field ::= identifier ":" Expr;

statement ::= "let" identifier "=" Expr ";"
           | "if" Expr "{" statements "}" ("else" "{" statements "}")?
           | "foreach" identifier "in" Expr "{" statements "}"
           | block
           | call ";";

statements ::= statement*;

call ::= identifier "(" Arguments ")";
Arguments ::= Expr ("," Expr)* | ε;

block ::= "account" string "{" statements "}"
        | object;

====================
FIRST in FOLLOW množice
====================

FIRST množice:
--------------
FIRST(Expr)                  = { int, float, string, variable, (, [, fst, snd, transaction }
FIRST(Bitwise)               = FIRST(Expr)
FIRST(Bitwise')              = { bwand, bwor, ε }
FIRST(Additive)              = FIRST(Bitwise)
FIRST(Additive')             = { +, -, ε }
FIRST(Multiplicative)        = FIRST(Additive)
FIRST(Multiplicative')       = { *, /, ε }
FIRST(Unary)                 = { +, -, int, float, string, variable, (, [, fst, snd, transaction }
FIRST(Primary)               = { int, float, string, variable, (, [, fst, snd, transaction }
FIRST(coord)                 = { ( }
FIRST(list)                  = { [ }
FIRST(object)                = { transaction }
FIRST(statement)             = { let, if, foreach, account, transaction, identifier }
FIRST(statements)            = FIRST(statement)
FIRST(block)                 = { account, transaction }
FIRST(call)                  = { identifier }

FOLLOW množice:
---------------
FOLLOW(Expr)                 = { ), ,, ;, } }
FOLLOW(Bitwise)              = FOLLOW(Expr)
FOLLOW(Bitwise')             = FOLLOW(Bitwise)
FOLLOW(Additive)             = FOLLOW(Bitwise') ∪ FIRST(Bitwise') = { bwand, bwor, ), ,, ;, } }
FOLLOW(Additive')            = FOLLOW(Additive)
FOLLOW(Multiplicative)       = FOLLOW(Additive') ∪ FIRST(Additive') = { +, -, bwand, bwor, ), ,, ;, } }
FOLLOW(Multiplicative')      = FOLLOW(Multiplicative)
FOLLOW(Unary)                = FOLLOW(Multiplicative') = { *, /, +, -, bwand, bwor, ), ,, ;, } }
FOLLOW(Primary)              = FOLLOW(Unary)
FOLLOW(coord)                = { ), ,, ; }
FOLLOW(list)                 = { ), ,, ; }
FOLLOW(object)               = { ), ,, ; }
FOLLOW(statement)            = { let, if, foreach, account, transaction, identifier, } }
FOLLOW(statements)           = { } }

====================
LL(1) Preglednica (izsek)
====================
Neterminal      | Vhodni simbol                     | Pravilo
-------------------------------------------------------------------
Expr            | int, float, string, variable, (   | Expr → Bitwise
Bitwise'        | bwand                             | Bitwise' → bwand Additive Bitwise'
Bitwise'        | bwor                              | Bitwise' → bwor Additive Bitwise'
Bitwise'        | ), ,, ;, }                        | Bitwise' → ε
Additive'       | +                                 | Additive' → + Multiplicative Additive'
Additive'       | -                                 | Additive' → - Multiplicative Additive'
Additive'       | bwand, bwor, ), ,, ;, }           | Additive' → ε
Multiplicative' | *                                 | Multiplicative' → * Unary Multiplicative'
Multiplicative' | /                                 | Multiplicative' → / Unary Multiplicative'
Multiplicative' | +, -, bwand, bwor, ), ,, ;, }     | Multiplicative' → ε
Unary           | +                                 | Unary → + Primary
Unary           | -                                 | Unary → - Primary
Unary           | int, float, string, variable, (   | Unary → Primary
Primary         | int                               | Primary → int
Primary         | float                             | Primary → float
Primary         | string                            | Primary → string
Primary         | variable                          | Primary → variable
Primary         | (                                 | Primary → ( Expr )
Primary         | [                                 | Primary → list
Primary         | fst                               | Primary → fst ( coord )
Primary         | snd                               | Primary → snd ( coord )
Primary         | transaction                       | Primary → object
statement       | let                               | statement → let identifier = Expr ;
statement       | if                                | statement → if Expr { statements } (else { statements })?
statement       | foreach                           | statement → foreach identifier in Expr { statements }
statement       | account                           | statement → block
statement       | transaction                       | statement → object
statement       | identifier                        | statement → call ;


